class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

def insert(node, data):
    if node is None:
        return Node(data)
    else:
        if data['nombre'] < node.data['nombre']:
            node.left = insert(node.left, data)
        else:
            node.right = insert(node.right, data)
    return node

def in_order_traversal(node):
    if node:
        in_order_traversal(node.left)
        print(node.data)
        in_order_traversal(node.right)

def level_order_traversal(root):
    if root is None:
        return

    queue = []
    queue.append(root)

    while(len(queue) > 0):
        print(queue[0].data)
        node = queue.pop(0)

        if node.left is not None:
            queue.append(node.left)

        if node.right is not None:
            queue.append(node.right)

def find_jedi(root, name):
    if root is None or root.data['nombre'] == name:
        return root

    if root.data['nombre'] < name:
        return find_jedi(root.right, name)

    return find_jedi(root.left, name)

def jedi_masters(root):
    if root:
        jedi_masters(root.left)
        if root.data['ranking'] == 'Jedi Master':
            print(root.data)
        jedi_masters(root.right)

def green_lightsaber_users(root):
    if root:
        green_lightsaber_users(root.left)
        if 'verde' in root.data['color_sable']:
            print(root.data)
        green_lightsaber_users(root.right)